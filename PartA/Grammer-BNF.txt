// Expression rules
expr              : assignment_expr
                  | logical_expr;

assignment_expr   : KEYWORD:VAR IDENTIFIER EQ expr;

logical_expr      : comp_expr (KEYWORD:AND|KEYWORD:OR comp_expr)*;

comp_expr         : NOT comp_expr
                  | arith_expr (EE|LT|GT|LTE|GTE arith_expr)*;

arith_expr        : term ((PLUS|MINUS) term)*;

term              : factor ((MUL|DIV|MODULO) factor)*;

factor            : (PLUS|MINUS) factor
                  | power;

power             : call (POW factor)*;

call              : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?;

atom              : INT
                  | FLOAT
                  | IDENTIFIER
                  | LPAREN expr RPAREN
                  | if_expr
                  | func_def
                  | lambda_def;

if_expr           : KEYWORD:IF expr KEYWORD:THEN expr
                  (KEYWORD:ELIF expr KEYWORD:THEN expr)*
                  (KEYWORD:ELSE expr)?;

func_def          : KEYWORD:FUN IDENTIFIER? LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN ARROW expr;

lambda_def        : KEYWORD:LAMBDA IDENTIFIER (COMMA IDENTIFIER)* DOT expr;
